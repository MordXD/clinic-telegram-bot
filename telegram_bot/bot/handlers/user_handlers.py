from telegram import Update, ReplyKeyboardMarkup, Bot, InlineKeyboardButton, InlineKeyboardMarkup
import re
from telegram.ext import ContextTypes, MessageHandler, filters, CallbackQueryHandler
from config import ADMIN_CHAT_ID

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"],
        ["–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫–ª–∏–Ω–∏–∫–∏ –ó–¥–æ—Ä–æ–≤–∞—è –Ø!\n"
        "–û–û–û –¢–ò–ú –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç —Å–≤–æ—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥ —Ç–æ—Ä–≥–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –¶–µ–Ω—Ç—Ä –∞–∫—É—à–µ—Ä—Å—Ç–≤–∞ –∏ –≥–∏–Ω–µ–∫–æ–ª–æ–≥–∏–∏ –ó–¥–æ—Ä–æ–≤–∞—è –Ø.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        reply_markup=reply_markup
    )

async def handle_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['application'] = {}
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    return "NAME"

async def handle_application_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['application']['name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return "PHONE"

# Add this function to validate phone numbers
def is_valid_phone_number(phone_number):
    # Simple regex for phone number validation (e.g., 10-15 digits)
    return re.match(r'^\d{10,15}$', phone_number)

async def handle_application_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone_number = update.message.text
    if not is_valid_phone_number(phone_number):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (10-15 —Ü–∏—Ñ—Ä).")
        return "PHONE"
    
    context.user_data['application']['phone'] = phone_number
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip:")
    return "COMMENT"  # Correct state transition

async def handle_application_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['application']['comment'] = update.message.text
    await update.message.reply_text("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞.")
    # Send the application data to the admin chat
    application_data = context.user_data['application']
    bot = context.bot
    message = (
         f"üìù *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:*\n"
         f"üë§ *–ò–º—è:* {application_data['name']}\n"
         f"üìû *–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* `{application_data['phone']}`\n"
         f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {application_data['comment'] or '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'}"
     )
    await bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=message,
        parse_mode="MARKDOWN"
    )
    return ConversationHandler.END

async def skip_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['application']['comment'] = None
    await update.message.reply_text("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞.")
    # Here you would send the application data to the admin chat
    return ConversationHandler.END

async def handle_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['feedback'] = {}
    # Create inline buttons with compact emojis for ratings
    keyboard = [
        [InlineKeyboardButton("üëç", callback_data='1'),
         InlineKeyboardButton("üëå", callback_data='2'),
         InlineKeyboardButton("üòä", callback_data='3'),
         InlineKeyboardButton("üòÉ", callback_data='4'),
         InlineKeyboardButton("üåü", callback_data='5')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É:", reply_markup=reply_markup)
    return "RATING"

async def handle_feedback_dislikes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['feedback']['dislikes'] = update.message.text
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ.")
    # Send the detailed feedback to the admin chat
    feedback_data = context.user_data.get('feedback', {})
    bot = context.bot
    message = (
        f"üìù *–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤:*\n"
        f"‚≠ê *–û—Ü–µ–Ω–∫–∞:* {feedback_data.get('rating', '–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏')}\n"
        f"üëé *–ß—Ç–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å:* {feedback_data['dislikes']}"
    )
    await bot.send_message(chat_id=ADMIN_CHAT_ID, text=message, parse_mode="MARKDOWN")
    return ConversationHandler.END
    context.user_data['feedback']['comment'] = update.message.text
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ.")
    # Send the feedback data to the admin chat
    feedback_data = context.user_data.get('feedback', {})
    bot = context.bot
    message = (
        f"üìù *–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤:*\n"
        f"‚≠ê *–û—Ü–µ–Ω–∫–∞:* {feedback_data['rating']}\n"
        f"üëç *–ß—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å:* {feedback_data.get('likes', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {feedback_data['comment']}"
    )
    await bot.send_message(chat_id=ADMIN_CHAT_ID, text=message, parse_mode="MARKDOWN")
    return ConversationHandler.END

async def contact_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–Ω–∏–∫–∏: +1234567890")

from telegram.ext import ConversationHandler, CommandHandler

def handle_user_commands():
    return [
        ConversationHandler(
            entry_points=[MessageHandler(filters.TEXT & filters.Regex("^–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É$"), handle_application)],
            states={
                "NAME": [MessageHandler(filters.TEXT, handle_application_name)],
                "PHONE": [MessageHandler(filters.TEXT, handle_application_phone)],
                "COMMENT": [MessageHandler(filters.TEXT, handle_application_comment), CommandHandler("skip", skip_comment)],
            },
            fallbacks=[CommandHandler("cancel", handle_application)],
        ),
        ConversationHandler(
            entry_points=[MessageHandler(filters.TEXT & filters.Regex("^–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤$"), handle_feedback)],
            states={
                "RATING": [CallbackQueryHandler(handle_feedback_rating)],
                "DISLIKES": [MessageHandler(filters.TEXT, handle_feedback_dislikes)],
            },
            fallbacks=[CommandHandler("cancel", start)],
        ),
        MessageHandler(filters.TEXT & filters.Regex("^–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º$"), contact_admin),
    ]
